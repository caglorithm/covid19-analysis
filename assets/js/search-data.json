{
  
    
        "post0": {
            "title": "A gentle intrudction to neurolib",
            "content": ". What is neurolib? . In its essence, neurolib is a computational framework for simulating coupled neural mass models. Neural mass models are mathematical models that help to simulate and understand the behaviour of large number of (coupled) neurons. Typically, these models make use of the statistical insight that the collective, macroscopic behavior of a large network of randomly connected neurons can be described without having to know the exact dynamics of every individual neuron at every time step. This is much like a statistical physicist would treat a gas where for example the temperature of the gas is an expression of the mean velocity of the gas particles, not the individual velocity of each particle. . Now that we know what neural masses are, what are they useful for and how is this related to neurolib? . One of the applications of neural mass models in computational neuroscience is in whole-brain modeling, where a coarse-grained simulation of the activity of a large network of brain areas is achieved by combining simulations of neural masses with structural connectivity scans (often reffered to as the connectome) of the human brain which captures large axonal connections that connect distant brain areas. . neurolib allows you to build, simulate, and optimize your own state-of-the-art whole-brain models. To simulate the neural activity of each brain area, the main implementation provides an advanced neural mass mean-field model of spiking adaptive exponential integrate-and-fire neurons (AdEx) called aln. Each brain area is represented by two populations of excitatory and inhibitory neurons. An extensive analysis and validation of the aln model can be found in our paper [1]. . [1] Cakan et al. (2020). Biophysically grounded mean-field models of neural populations under electrical stimulation. PLOS Computational Biology (ArXiv). . The figure below shows a schematic of how a brain network can be constructed: . . The neural mass model . In this notebook we will learn about the basics of neurolib. We will create a two-population mean-field model of exponential integrate-and-fire neurons called the aln model. We will learn how to create a Model, set some parameters and run a simulation. We will also see how we can easily access the output of each simulation. . aln - the adaptive linear-nonlinear cascade model . The adaptive linear-nonlinear (aln) cascade model is a low-dimensional population model of spiking neural networks. Mathematically, it is a dynamical system of non-linear ODEs. The dynamical variables of the system simulated in the aln model describe the average firing rate and other macroscopic variables of a randomly connected, delay-coupled network of excitatory and inhibitory adative exponential integrate-and-fire neurons (AdEx) with non-linear synaptic currents. . Ultimately, the model is a result of various steps of model reduction starting from the Fokker-Planck equation of the AdEx neuron subject to white noise input at many steps of input means $ mu$ and variances $ sigma$. The resulting mean firing rates and mean membrane potentials are then stored in a lookup table and serve as the nonlinear firing rate transfer function, $r = Phi( mu, sigma)$. . Using neurolib . Let&#39;s get going after all this reading. neurolib makes it easy to set of your simulation. Below, we demonstrate how you set up a model and interact with its paramters. We will first explore the a single node and get comfortable with the way things work and then set up a whole-brain simulation and simulate fMRI activity. . Simulating a single node . To create a single node, we instanciate the model without any arguments. . # Let&#39;s import the aln model from neurolib.models.aln import ALNModel # Create the model aln = ALNModel() # Each model comes with a set of default parameters which are are a dictionary. # Let&#39;s change the parameter that controls the duration of a simulation to 10s. aln.params[&#39;duration&#39;] = 10.0 * 1000 # For convenience, we could also use: aln.params.duration = 10.0 * 1000 # In the aln model an Ornstein-Uhlenbeck process is simulated in parallel # as the source of input noise fluctuations. Here we can set the variance # of the process. # For more info: https://en.wikipedia.org/wiki/Ornstein%E2%80%93Uhlenbeck_process # Let&#39;s add some noise. aln.params[&#39;sigma_ou&#39;] = 0.1 # Finally, we run the model aln.run() . Accessing the outputs . Accessing the outputs is straight-forward. Every model&#39;s outputs are stored in the model.outputs attribute. According to the specific name of each of the model&#39;s outputs, they can also be accessed as a key of the Model object, i.e. aln[&#39;rates_exc&#39;]. . Let&#39;s have a look what the outputs of of the aln model are called: . aln.outputs.keys() . dict_keys([&#39;t&#39;, &#39;rates_exc&#39;, &#39;rates_inh&#39;]) . As you can see here, the model produces several outputs after executing aln.run(). The first entry t is the time array: . aln[&#39;t&#39;] . array([1.0000e-01, 2.0000e-01, 3.0000e-01, ..., 9.9998e+03, 9.9999e+03, 1.0000e+04]) . Let&#39;s have a look, what the actual rate output of the excitatory population loos like, rates_exc. If you&#39;re lazy, you can also access most of the key-valued objects in neurolib using a dot.separated syntax: . aln.rates_exc.shape . (1, 100000) . The entries of aln.rates_exc are the excitatory population&#39;s firing rate in time. Every model&#39;s default output, in this case rates_exc, can also be accessed through calling: . aln.output . array([[26.15770656, 24.06801404, 22.22713507, ..., 1.82543728, 1.78704101, 1.75078031]]) . If we plot the output against the simulation time aln.t, we get this: . Outputs are also available as an xarray DataArray: . xr = aln.xr() print(xr.dims) . (&#39;output&#39;, &#39;space&#39;, &#39;time&#39;) . Bifurcation diagram . In order to understand what&#39;s going on, we should get some orientation and figure out what the model is doing when we change certain parameters. We have already seen that adding some noise can create these nice irregular oscillations. One way of figuring out the effects of certain parameters to a dynamical system is to compute bifurcation diagrams. Bifurcations are processes in which a system&#39;s behaviour suddenly and rapidly changes due to a small change of a parameter. Usually, this results in some kind of a state change of a system or a transition into a new dynamical regime, such as starting to oscillate. . One of the most important parameters of the aln model is the external input currents to each subpopulation. The parameter that controls the inputs to the excitatory population is called mue_ext_mean, which is a terrible way of saying &quot;mean input current to the excitatory subpopulation&quot;. . Let&#39;s check the current value of this parameter: . aln.params[&quot;mue_ext_mean&quot;] . 0.4 . Again, we could&#39;ve also used the syntax aln.params.mue_ext_mean as well. . In order to find out how our model is behaving under changes of this parameter, it&#39;s a good idea to do a quick parameter exploration. For this we scan through a range of possible values of mue_ext_mean, simulate the model for a bit and record the minimum and the maximum value of the firing rate of the excitatory population. We remember all these values and draw a bifurcation diagram. . # initialize the model aln = ALNModel() aln.params[&#39;duration&#39;] = 2.0*1000 # lists that will conatin the results max_outputs = [] min_outputs = [] # these are the different input values that we want to scan inputs = np.linspace(0, 2, 50) # cycle through all input values for mue in inputs: # Note: this has to be a vector since it is input for all nodes # (but we have only one node in this example) aln.params[&#39;mue_ext_mean&#39;] = mue aln.run() # we add the maximum and the minimum of the last second of the # simulation to a list max_outputs.append(np.max(aln.output[0, -int(1000/aln.params[&#39;dt&#39;]):])) min_outputs.append(np.min(aln.output[0, -int(1000/aln.params[&#39;dt&#39;]):])) . Plotting the inputs to max_outputs and max_inputs gives us the bifurcation diagram of the aln model in the mue_ext_mean parameter space. . Text(0, 0.5, &#39;Min / max firing rate&#39;) . We can see that at low values, there is basically no activity with values hovering around 0 Hz. We call this the down-state. At a certain threshold point though, the lines diverge and an oscillatory state can be observed. Here the activity oscillates between the excitatory and the inhibitory populations. Increasing the input even further leads to another bifurcation, resulting in a diagram where the lines converge again. The oscillation stops and the activity returns to a constant firing rate, now with an increased level than where we started. This is called the up-state. . Whole-brain modeling . Typically, in whole-brain modeling, diffusion tensor imaging (DTI) is used to infer the structural connectivity (the connection strength) between different brain areas. In a DTI scan, the direction of the diffusion of molecules is measured across the whole brain. Using tractography, this information can yield the distribution of axonal fibers in the brain that connect distant brain areas, called the connectome. Together with an atlas that divides the brain into distinct areas, a matrix can be computed that encodes how many fibers go from one area to another, the so-called structural connectivity (SC) matrix. This matrix defines the coupling strengths between brain areas and acts as an adjacency matrix of the brain network. The length of the fibers determine the signal transmission delay between all brain areas. When the structural data is combined with a computational model of the neuronal activity of the cortex, we can create a dynamical model of the whole brain. . The resulting whole-brain model consists of interconnected brain areas, with each brain area having their internal neural dynamics. The neural activity is used to simulate hemodynamic BOLD activity using the Balloon-Windkessel model, which can be compared to empirical fMRI data. The simulated BOLD activity is used to compute correlations of activity between all brain areas, the so called resting state functional connectivity, which can then be fitted to empirical fMRI resting-state data. . Setting up a brain . neurolib comes with some example datasets for exploring its functionality. Please be aware that these datasets are not tested and should not be used for your research, only for experimentation with the software. . A dataset for whole-brain modeling can consists of the following parts: . A structural connectivity matrix capturing the synaptic connection strengths between brain areas, often derived from DTI tractography of the whole brain. The connectome is then typically parcellated in a preferred atlas (for exapmle the AAL2 atlas) and the number of axonal fibers connecting each brain area with every other area is counted. This number serves as a indication of the synaptic coupling strengths between the areas of the brain. | A delay matrix which can be calculated from the average length of the axonal fibers connecting each brain area with another. | A set of functional data that can act as a target for model optimization. Resting-state fMRI offers an easy and fairly unbiased way for calibrating whole-brain models. EEG data could be used as well. | . We can load a Dataset by passing the name of it in the constructor. . from neurolib.utils.loadData import Dataset ds = Dataset(&quot;hcp&quot;) . We now create the aln model with a structural connectivity matrix and a delay matrix. In order to achieve a good fit of the BOLD activity to the empirical data, the model has to run for quite a while. A a rule of thumb, a simulation of resting-state BOLD activity should not be shorter than 3 minutes and preferrably longer than 5 minutes real time. If the empirical recordings are for example 10 minues long, ideally, a simulation of 10 minutes would be used to compare the output of the model to the resting state recording. . # We load the model, but now with the structural dataset aln = ALNModel(Cmat = ds.Cmat, Dmat = ds.Dmat) # Let&#39;s run the simulation for 2 minutes aln.params[&#39;duration&#39;] = 2*60*1000 . After some optimization to the resting-state fMRI data of the dataset, we found a set of parameters that produces interesting whole-brain dynamics. We set the mean input of the excitatory and the inhibitory population to be close to the E-I limit cycle. . aln.params[&#39;mue_ext_mean&#39;] = 1.57 aln.params[&#39;mui_ext_mean&#39;] = 1.6 # We set an appropriate level of noise aln.params[&#39;sigma_ou&#39;] = 0.09 # And turn on adaptation with a low value of spike-triggered adaptation currents. aln.params[&#39;b&#39;] = 5.0 . Let&#39;s have a look what the data looks like. We can access the data of each model by calling its internal attrivbutes. Here, we plot the structural connectivity matrix by calling aln.params[&#39;Cmat&#39;] and fiber length matrix by calling aln.params[&#39;lengthMat&#39;]. Of course, we can also access the dataset using the Dataset object itself. For example the functional conencity matrices of the BOLD timeseries in the datasets are given as list with ds.FCs. . Text(0, 0.5, &#39;Brain area&#39;) . Run model . We run the model with bold simulation by using bold=True. This simulates the Balloon-Windkessel BOLD model in parallel to the neural population model in order to estimate the blood oxigen levels of the underlying neural activity. The output of the bold model can be used to compare the simulated data to empirical fMRI data (resting-state fMRI for example). . To save (a lot of) RAM, we can run the simulation in chunkwise mode. In this mode, the model will be simulated for a length of chunksize steps (not time in ms, but actual integration steps!), and the output of that chunk will be used to automatically reinitiate the model with the appropriate initial conditions. This allows for a serial continuation of the model without having to store all the data in memory and is particularly useful for very long and many parallel simulations. . aln.run(chunkwise=True, chunksize = 100000, bold=True) . Results . The outputs of the model can be accessed using the attribute model.outputs . aln.outputs.keys() . dict_keys([&#39;t&#39;, &#39;rates_exc&#39;, &#39;rates_inh&#39;, &#39;BOLD&#39;]) . For convenience, they can also be accessed directly using attributes of the model with the outputs name, like aln.rates_exc. The outputs are also available as xr DataArrays as aln.xr(). . The since we used bold=True to simulate BOLD, we can also access aln.BOLD.BOLD for the actual BOLD activity, and aln.BOLD.t for the time steps of the BOLD simulation (which are downsampled to 0.5 Hz by default). . Plot simulated activity . Text(0, 0.5, &#39;Brain area&#39;) . # the results of the model are also accesible through an xarray DataArray fig, axs = plt.subplots(1, 1, figsize=(6, 2), dpi=75) axs.plot(aln.xr().time, aln.xr().loc[&#39;rates_exc&#39;].T); axs.set_title(&quot;Neural activity&quot;) axs.set_xlabel(&quot;Time [ms]&quot;) axs.set_ylabel(&quot;Firing rate [Hz]&quot;) . Text(0, 0.5, &#39;Firing rate [Hz]&#39;) . Correlation of simulated BOLD to empirical data . We can compute the element-wise Pearson correlation of the functional connectivity matrices of the simulated data to the empirical data to estimate how well the model captures the inter-areal BOLD correlations found in empirical resting-state recordings. . scores = [func.matrix_correlation(func.fc(aln.BOLD.BOLD[:, 5:]), fcemp) for fcemp in ds.FCs] print(&quot;Correlation per subject:&quot;, [f&quot;{s:.2}&quot; for s in scores]) print(f&quot;Mean FC/FC correlation: {np.mean(scores):.2}&quot;) . Correlation per subject: [&#39;0.46&#39;, &#39;0.54&#39;, &#39;0.59&#39;, &#39;0.47&#39;, &#39;0.49&#39;, &#39;0.47&#39;, &#39;0.62&#39;] Mean FC/FC correlation: 0.52 . Since this notebook is automatically generated, I hope the result is pretty good for a 2 minute simulation :) . Acknowledgments . neurolib is built on other amazing open source projects: . pypet - Python parameter exploration toolbox | deap - Distributed Evolutionary Algorithms in Python | numpy - The fundamental package for scientific computing with Python | numba - NumPy aware dynamic Python compiler using LLVM | Jupyter - Jupyter Interactive Notebook | fastpages - An easy to use blogging platform | binder - Reproducible executable environments | Bob Holzer is the author of the the brain network visual asset of this post&#39;s title image which is released under the Creative Commons license | . Last build 11.04.20 02:59:27 .",
            "url": "https://caglorithm.github.io/notebooks/neurolib-intro/",
            "relUrl": "/neurolib-intro/",
            "date": " • Apr 10, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "COVID-19 Confirmed Cases vs. Deaths",
            "content": "Last build 10.04.20 00:16:20 . Estimated time of infection vs. confirmed infections . Following the ideas from Tomas Pueyo&#39;s Medium post &quot;Coronavirus: Why You Must Act Now&quot; [1], we assume the average time from infection to death at 23 days [2]. The data is pulled from the COVID-19 Data Repository by Johns Hopkins CSSE [3] every hour. Countries with a minimnum of 1000 confirmed cases and 40 confirmed deaths are included in this analysis. . The time from infection to death is equal to the incubation period plus the time from symptoms to death. This is used to estimate the time of the infections that lead to the observed deaths. We take the last fatality rate per country (total_cases/total_deaths) to estimate the number of infections that are responsible for the observed deaths. . In the figures below, you can observe successive waves of infections (dashed), detections (black) and deaths (red) for each country. The upper panel shows the absolute number of events. The dashed lines show the estimated number of infections. The lower panel shows the normalized number of events. Here the temporal delay between the waves and the relative change between each other can be observed. . [1] https://medium.com/@tomaspueyo/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca . [2] https://github.com/midas-network/COVID-19/tree/master/parameter_estimates/2019_novel_coronavirus . [3] https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series . Ahead of the curve . Some countries start testing the population earlier in the outbreak than others. The time delay between the wave of deaths and the wave of confirmed cases is indicative for how early a country is detecting new cases ahead of the increase of deaths. Earlier detection means a better chances for successful isolation of an infected person and treatment of the desease. . We measure the distance of the maximum of cumulative deaths and new deaths to the number of infections to estimate the progression of the infection across countries. . If, in the early phase of the infection wave, the number of deaths rises faster than the number of confirmed cases, the distance drops, indicating that . A comparison of countries with respect to their mean time for reponse is presented below. . To determine the above values, we plot the number of confirmed cases (solid black lines) and the number of deaths (dashed black lines). From this, we measure the distance of the day of maximum deaths (dashed red lines) to the day of confirmed cases at this y-value. . The distance is indicative for how fast the humber of confirmed cases increases comapred to the increase of the number of deaths. .",
            "url": "https://caglorithm.github.io/notebooks/covid-cases-to-deaths/",
            "relUrl": "/covid-cases-to-deaths/",
            "date": " • Mar 21, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "COVID-19 Fatality rates",
            "content": "Last build 10.04.20 00:17:46 . Cummulative confirmed cases per deaths . The fatality rate is calculated as the cumulative number of confirmed cases divided by the cumulative number of deaths. . click the country label that you want to highlight. Shift + click to compare different countries. .",
            "url": "https://caglorithm.github.io/notebooks/covid-fatality-rates/",
            "relUrl": "/covid-fatality-rates/",
            "date": " • Mar 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://caglorithm.github.io/notebooks/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}